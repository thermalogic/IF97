//! IAPWS-IF97 : Boundary Methods
//! *  <http://www.iapws.org/relguide/Supp-Tv(ph,ps)-2014.pdf>
//! *  <http://www.iapws.org/relguide/Supp-phs3-2014.pdf>

use crate::algo::*;
use crate::common::constant::*;
use crate::r1::region1_pT::*;
use crate::r2::region2_pT::*;

/// IF97-rev Boundary between Regions 2 and 3
///  * T in K
///  * return: p between regions 2 and 3 in MPa
pub fn B23_T2p(T: f64) -> f64 {
    const n23: [f64; 3] = [0.34805185628969e3, -0.11671859879975e1, 0.10192970039326e-2];
    n23[0] + (n23[1] + n23[2] * T) * T
}

/// IF97-rev Table 5, pag 9: Auxiliary equation for the boundary 2-3
///  *  p pressure in MPa
///  * return: temperature between regions 2 and 3 in K
pub fn B23_p2T(p: f64) -> f64 {
    const n23: [f64; 3] = [0.10192970039326e-2, 0.57254459862746e3, 0.13918839778870e2];
    n23[1] + ((p - n23[2]) / n23[0]).powf(0.5)
}

/// Check the region in (p,h)
/// supp tv(ph,ps) 2014 supplementary 03 for region 3
///  *  Eq.10  <http://www.iapws.org/relguide/Supp-Tv(ph,ps)-2014.pdf>,

///  The equation h2p_sat_reg3(h) describes the saturated liquid line and the
///    saturated vapor line including the critical point in the enthalpy range
pub fn h2p_sat_reg3(h: f64) -> f64 {
    // Table 18 page 18
    const IJn: [(i32, i32, f64); 14] = [
        (0, 0, 0.600073641753024),
        (1, 1, -0.936203654849857e1),
        (1, 3, 0.246590798594147e2),
        (1, 4, -0.107014222858224e3),
        (1, 36, -0.915821315805768e14),
        (5, 3, -0.862332011700662e4),
        (7, 0, -0.235837344740032e2),
        (8, 24, 0.252304969384128e18),
        (14, 16, -0.389718771997719e19),
        (20, 16, -0.333775713645296e23),
        (22, 3, 0.356499469636328e11),
        (24, 18, -0.148547544720641e27),
        (28, 8, 0.330611514838798e19),
        (36, 24, 0.813641294467829e38),
    ];

    let hmin_Ps3: f64 = pT2h_reg1(Ps_623, 623.15);
    let hmax_Ps3: f64 = pT2h_reg2(Ps_623, 623.15);
    if h < hmin_Ps3 || h > hmax_Ps3 {
        return INVALID_H as f64;
    }

    let nu: f64 = h / 2600.0;
    let mut suma: f64 = poly_powi(nu - 1.02, nu - 0.608, &IJn);
    22.0 * suma
}

/// Check the region for (p,s)

///  Define the saturated line, P=f(s) for region 3
///   * Eq11  <http://www.iapws.org/relguide/Supp-Tv(ph,ps)-2014.pdf>
pub fn s2p_sat_reg3(s: f64) -> f64 {
    const IJn: [(i32, i32, f64); 10] = [
        (0, 0, 0.639767553612785),
        (1, 1, -0.129727445396014e2),
        (1, 32, -0.224595125848403e16),
        (4, 7, 0.177466741801846e7),
        (12, 4, 0.717079349571538e10),
        (12, 14, -0.378829107169011e18),
        (16, 36, -0.955586736431328e35),
        (24, 10, 0.187269814676188e24),
        (28, 0, 0.119254746466473e12),
        (32, 18, 0.110649277244882e37),
    ];

    // Check input parameters
    let smin_Ps3: f64 = pT2s_reg1(Ps_623, 623.15);
    let smax_Ps3: f64 = pT2s_reg2(Ps_623, 623.15);
    if s < smin_Ps3 || s > smax_Ps3 {
        return INVALID_S as f64;
    }

    let sigma: f64 = s / 5.2;
    let mut suma: f64 = poly_powi(sigma - 1.03, sigma - 0.699, &IJn);
    22.0 * suma
}

///  Equations of (h,s) for the Region Boundaries

/// Define the saturated line boundary between Region 1 and 4, h=f(s)
///  * Eq 3  <http://www.iapws.org/relguide/Supp-phs3-2014.pdf>
pub fn hs_region_h1_s(s: f64) -> f64 {
    const IJn: [(i32, i32, f64); 27] = [
        (0, 14, 0.332171191705237E+0),
        (0, 36, 0.611217706323496E-3),
        (1, 3, -0.882092478906822E+1),
        (1, 16, -0.455628192543250E+0),
        (2, 0, -0.263483840850452E-4),
        (2, 5, -0.223949661148062E+2),
        (3, 4, -0.428398660164013E+1),
        (3, 36, -0.616679338856916E+0),
        (4, 4, -0.146823031104040E+2),
        (4, 16, 0.284523138727299E+3),
        (4, 24, -0.113398503195444E+3),
        (5, 18, 0.115671380760859E+4),
        (5, 24, 0.395551267359325E+3),
        (7, 1, -0.154891257229285E+1),
        (8, 4, 0.194486637751291E+2),
        (12, 2, -0.357915139457043E+1),
        (12, 4, -0.335369414148819E+1),
        (14, 1, -0.664426796332460E+0),
        (14, 22, 0.323321885383934E+5),
        (16, 10, 0.331766744667084E+4),
        (20, 12, -0.223501257931087E+5),
        (20, 28, 0.573953875852936E+7),
        (22, 8, 0.173226193407919E+3),
        (24, 3, -0.363968822121321E-1),
        (28, 0, 0.834596332878346E-6),
        (32, 6, 0.503611916682674E+1),
        (32, 8, 0.655444787064505E+2),
    ];

    // Check input parameters
    if s < -1.545495919e-4 || s > 3.77828134 {
        return INVALID_S as f64;
    }

    let sigma: f64 = s / 3.8;
    let mut suma: f64 = poly_powi(sigma - 1.09, sigma + 0.366e-4, &IJn);
    1700.0 * suma
}

///  The saturated line boundary between Region 4 and 3a, h=f(s)
///   * Eq.4  <http://www.iapws.org/relguide/Supp-phs3-2014.pdf>
pub fn hs_region_h3a_s(s: f64) -> f64 {
    const IJn: [(i32, i32, f64); 19] = [
        (0, 1, 0.822673364673336E+0),
        (0, 4, 0.181977213534479E+0),
        (0, 10, -0.112000260313624E-1),
        (0, 16, -0.746778287048033E-3),
        (2, 1, -0.179046263257381E+0),
        (3, 36, 0.424220110836657E-1),
        (4, 3, -0.341355823438768E+0),
        (4, 16, -0.209881740853565E+1),
        (5, 20, -0.822477343323596E+1),
        (5, 36, -0.499684082076008E+1),
        (6, 4, 0.191413958471069E+0),
        (7, 2, 0.581062241093136E-1),
        (7, 28, -0.165505498701029E+4),
        (7, 32, 0.158870443421201E+4),
        (10, 14, -0.850623535172818E+2),
        (10, 32, -0.317714386511207E+5),
        (10, 36, -0.945890406632871E+5),
        (32, 0, -0.139273847088690E-5),
        (32, 6, 0.631052532240980E+0),
    ];
    // Check input parameters
    if s < 3.77828134 || s > SC_WATER {
        return INVALID_S as f64;
    }

    let sigma: f64 = s / 3.8;
    let mut suma: f64 = poly_powi(sigma - 1.09, sigma + 0.366e-4, &IJn);
    1700.0 * suma
}

/// Define the saturated line boundary between Region 4 and 2a-2b, h=f(s)
///   Eq.5  <http://www.iapws.org/relguide/Supp-phs3-2014.pdf>
pub fn hs_region_h2ab_s(s: f64) -> f64 {
    const IJn: [(i32, i32, f64); 30] = [
        (1, 8, -0.524581170928788E03),
        (1, 24, -0.926947218142218E07),
        (2, 4, -0.237385107491666E03),
        (2, 32, 0.210770155812776E11),
        (4, 1, -0.239494562010986E02),
        (4, 2, 0.221802480294197E03),
        (7, 7, -0.510472533393438E07),
        (8, 5, 0.124981396109147E07),
        (8, 12, 0.200008436996201E10),
        (10, 1, -0.815158509791035E03),
        (12, 0, -0.157612685637523E03),
        (12, 7, -0.114200422332791E11),
        (18, 10, 0.662364680776872E16),
        (20, 12, -0.227622818296144E19),
        (24, 32, -0.171048081348406E32),
        (28, 8, 0.660788766938091E16),
        (28, 12, 0.166320055886021E23),
        (28, 20, -0.218003784381501E30),
        (28, 22, -0.787276140295618E30),
        (28, 24, 0.151062329700346E32),
        (32, 2, 0.795732170300541E07),
        (32, 7, 0.131957647355347E16),
        (32, 12, -0.325097068299140E24),
        (32, 14, -0.418600611419248E26),
        (32, 24, 0.297478906557467E35),
        (36, 10, -0.953588761745473E20),
        (36, 12, 0.166957699620939E25),
        (36, 20, -0.175407764869978E33),
        (36, 22, 0.347581490626396E35),
        (36, 28, -0.710971318427851E39),
    ];

    // Check input parameters
    if s < 5.85 || s > 9.155759395 {
        return INVALID_S as f64;
    }

    let sigma1: f64 = s / 5.21;
    let sigma2: f64 = s / 9.2 - 0.524;
    let mut suma: f64 = poly_powi(1.0 / sigma1 - 0.513, sigma2, &IJn);
    2800.0 * suma.exp()
}

/// Define the saturated line boundary between Region 4 and 2c-3b, h=f(s)
///  * Eq.6   <http://www.iapws.org/relguide/Supp-phs3-2014.pdf>
pub fn hs_region_h2c3b_s(s: f64) -> f64 {
    const IJn: [(i32, i32, f64); 16] = [
        (0, 0, 0.104351280732769E01),
        (0, 3, -0.227807912708513E01),
        (0, 4, 0.180535256723202E01),
        (1, 0, 0.420440834792042E00),
        (1, 12, -0.105721244834660E06),
        (5, 36, 0.436911607493884E25),
        (6, 12, -0.328032702839753E12),
        (7, 16, -0.678686760804270E16),
        (8, 2, 0.743957464645363E04),
        (8, 20, -0.356896445355761E20),
        (12, 32, 0.167590585186801E32),
        (16, 36, -0.355028625419105E38),
        (22, 2, 0.396611982166538E12),
        (22, 32, -0.414716268484468E41),
        (24, 7, 0.359080103867382E19),
        (36, 20, -0.116994334851995E41),
    ];

    // Check input parameters
    if s < SC_WATER || s > 5.85 {
        return INVALID_S as f64;
    }

    let sigma: f64 = s / 5.9;
    let mut suma: f64 = poly_powi(sigma - 1.02, sigma - 0.726, &IJn);
    2800.0 * suma.powi(4)
}

///  Define the boundary between Region 1 and 3, h=f(s)
///  Eq.7    <http://www.iapws.org/relguide/Supp-phs3-2014.pdf>
pub fn hs_region_h13_s(s: f64) -> f64 {
    const IJn: [(i32, i32, f64); 6] = [
        (0, 0, 0.913965547600543E+00),
        (1, -2, -0.430944856041991E-04),
        (1, 2, 0.603235694765419E+02),
        (3, -12, 0.117518273082168E-17),
        (5, -4, 0.220000904781292E+00),
        (6, -3, -0.690815545851641E+02),
    ];

    if s < 3.397782955 || s > 3.77828134 {
        return INVALID_S as f64;
    };

    let sigma: f64 = s / 3.8;
    let mut suma: f64 = poly_powi(sigma - 0.884, sigma - 0.864, &IJn);
    1700.0 * suma
}

///  Page25 Eq8  Define the boundary between Region 2 and 3, T=f(h,s)
///  *  4.6 Equation TB23(h,s) <http://www.iapws.org/relguide/Supp-phs3-2014.pdf>
pub fn hs_region_t_hs(h: f64, s: f64) -> f64 // _t23_hs(h, s)
{
    const IJn: [(i32, i32, f64); 25] = [
        (-12, 10, 0.629096260829810E-03),
        (-10, 8, -0.823453502583165E-03),
        (-8, 3, 0.515446951519474E-07),
        (-4, 4, -0.117565945784945E+01),
        (-3, 3, 0.348519684726192E+01),
        (-2, -6, -0.507837382408313E-11),
        (-2, 2, -0.284637670005479E+01),
        (-2, 3, -0.236092263939673E+01),
        (-2, 4, 0.601492324973779E+01),
        (0, 0, 0.148039650824546E+01),
        (1, -3, 0.360075182221907E-03),
        (1, -2, -0.126700045009952E-01),
        (1, 10, -0.122184332521413E+07),
        (3, -2, 0.149276502463272E+00),
        (3, -1, 0.698733471798484E+00),
        (5, -5, -0.252207040114321E-01),
        (6, -6, 0.147151930985213E-01),
        (6, -3, -0.108618917681849E+01),
        (8, -8, -0.936875039816322E-03),
        (8, -2, 0.819877897570217E+02),
        (8, -1, -0.182041861521835E+03),
        (12, -12, 0.261907376402688E-05),
        (12, -1, -0.291626417025961E+05),
        (14, -12, 0.140660774926165E-04),
        (14, 1, 0.783237062349385E+07),
    ];
    // Check input parameters
    if s < 5.048096828 || s > 5.260578707 || h < 2.563592004e3 || h > 2.812942061e3 {
        return INVALID_HS as f64;
    }

    let nu: f64 = h / 3000.0;
    let sigma: f64 = s / 5.3;
    let mut suma: f64 = poly_powi(nu - 0.727, sigma - 0.864, &IJn);
    900.0 * suma
}
